<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration>
<configuration scan="true" scanPeriod="60 seconds">

	<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
	<conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
	<conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />

    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />    

    <!-- 변수 지정 -->
    <property name="LOG_LOCAL_PATH_NAME" value="/logs/kt-edu/edu-feedback.log" />
	<property name="LOG_LOCAL_ERROR_PATH_NAME" value="/logs/kt-edu/edu-feedback-error.log" />
    <property name="LOG_DEV_PATH_NAME" value="/logs/kt-edu/edu-feedback.log" />
    
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    	<!-- By default, encoders are assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>
	
	<appender name="SQLCONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<Pattern>
				%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %n		%m%n%wEx
			</Pattern>
		</layout>
	</appender>
	
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_LOCAL_PATH_NAME}</file>
        <!-- 일자별로 로그파일 적용하기 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_LOCAL_PATH_NAME}.%d{yyyy-MM-dd}</fileNamePattern>
            <maxHistory>30</maxHistory> <!-- 일자별 백업파일의 보관기간 -->
			<totalSizeCap>5GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%-5p] [%F]%M\(%L\) : %m%n</pattern>
        </encoder>
    </appender>

	<appender name="ERROR_LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${LOG_LOCAL_ERROR_PATH_NAME}</file>        
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_LOCAL_ERROR_PATH_NAME}.%d{yyyy-MM-dd}</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>5GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%-5p] [%F]%M\(%L\) : %m%n</pattern>
        </encoder>   
	</appender>
	<!-- 
	jdbc.sqlonly : Logs only SQL 
	jdbc.sqltiming : Logs the SQL, post-execution, including timing execution statistics 
	jdbc.audit : Logs ALL JDBC calls except for ResultSets 
	jdbc.resultset : all calls to ResultSet objects are logged 
	jdbc.connection : Logs connection open and close events
	-->

	<!-- 로그 퍼포먼스 상승 - jdbc.sqlonly 제거 -->	
	<logger name="jdbc.sqlonly" level="off" />
	<logger name="jdbc.resultset" level="off" />
	<logger name="jdbc.audit" level="off" />		
	<logger name="jdbc.connection" level="off" />
	<logger name="jdbc.sqltiming" level="info" additivity="false">
		<appender-ref ref="SQLCONSOLE" />
	</logger>

	<logger name="jdbc.resultsettable" level="info" />

	<root level="INFO" additivity="false">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />
		<appender-ref ref="ERROR_LOG_FILE" />
		<!--
		<appender-ref ref="CONSOLE" />
		-->
	</root>
	
</configuration>
